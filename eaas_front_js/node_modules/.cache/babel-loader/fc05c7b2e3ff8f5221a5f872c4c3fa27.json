{"ast":null,"code":"var _jsxFileName = \"/Users/albertgine/Desktop/TFG/eaas_front-master/src/components/ProblemCharacteristics/index.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport Typography from \"@mui/material/Typography\";\nimport store from \"../../store\";\nimport { useState } from \"react\";\nimport List from \"@mui/material/List\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Grid from \"@mui/material/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProblemCharacteristics = () => {\n  _s();\n\n  const [files] = useState(store.getState().modelfiles);\n  const model = {\n    type: undefined,\n    uncertainty: undefined,\n    solver: undefined\n  };\n\n  function getFileExtension(item) {\n    return `File: ${item.name}  -   Extension: ${item.name.split('.').at(-1)}`;\n  }\n\n  function getExtensionList() {\n    console.log(files);\n    return files.map(item => getFileExtension(item));\n  }\n\n  function getModelType() {\n    const ext = files[0].name.split('.').at(-1);\n\n    if (files.length === 1) {\n      if (ext === \"mps\" || ext === 'ls') {\n        model.type = \"linear\";\n        model.uncertainty = \"deterministic\";\n        console.log(model);\n      }\n    }\n\n    if (ext === \"nl\") {\n      model.type = \"non-linear\";\n    }\n\n    console.log(files);\n    console.log(files.length);\n    console.log(ext);\n    console.log(files.length === 1);\n  }\n\n  getModelType();\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 6,\n      id: \"App-FileUploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          mt: 4,\n          mb: 2,\n          width: \"100%\",\n          maxWidth: \"100%\"\n        },\n        variant: \"h6\",\n        component: \"div\",\n        children: [\"Currently selected files: \", files.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        dense: true,\n        children: getExtensionList().map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            width: '100%',\n            height: '10%'\n          },\n          className: \"App-FileUploadCard\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(ListItem, {\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      component: 'span',\n      children: [\"Detected model:\", /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" Type: \", model.type, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" Uncertainty: \", model.uncertainty, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\" Solver: \", model.solver, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProblemCharacteristics, \"KCvs8wTyACke1IbfIkv+/2dWZfg=\");\n\n_c = ProblemCharacteristics;\nexport default ProblemCharacteristics;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProblemCharacteristics\");","map":{"version":3,"sources":["/Users/albertgine/Desktop/TFG/eaas_front-master/src/components/ProblemCharacteristics/index.js"],"names":["React","Typography","store","useState","List","Card","CardContent","ListItem","ListItemText","Grid","ProblemCharacteristics","files","getState","modelfiles","model","type","undefined","uncertainty","solver","getFileExtension","item","name","split","at","getExtensionList","console","log","map","getModelType","ext","length","mt","mb","width","maxWidth","index","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Typography from \"@mui/material/Typography\";\nimport store from \"../../store\";\nimport {useState} from \"react\";\nimport List from \"@mui/material/List\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Grid from \"@mui/material/Grid\";\n\nconst ProblemCharacteristics = () => {\n    const [files] = useState(store.getState().modelfiles);\n    const model = {\n        type: undefined,\n        uncertainty: undefined,\n        solver: undefined\n    };\n\n    function getFileExtension(item) {\n        return `File: ${item.name}  -   Extension: ${item.name.split('.').at(-1)}`;\n    }\n\n    function getExtensionList() {\n        console.log(files);\n        return files.map(item => getFileExtension(item));\n    }\n\n\n    function getModelType() {\n\n        const ext = files[0].name.split('.').at(-1);\n\n        if (files.length === 1) {\n            if (ext === \"mps\" || ext === 'ls') {\n                model.type = \"linear\";\n                model.uncertainty = \"deterministic\";\n\n                console.log(model);\n            }\n\n        }\n\n        if (ext === \"nl\")\n        {\n            model.type = \"non-linear\";\n        }\n\n        console.log(files);\n        console.log(files.length);\n        console.log(ext);\n        console.log(files.length === 1);\n    }\n\n    getModelType();\n\n    return (\n        <React.Fragment>\n            <Grid item xs={12} md={6} id=\"App-FileUploadContainer\">\n                <Typography sx={{ mt: 4, mb: 2, width: \"100%\", maxWidth: \"100%\" }} variant=\"h6\" component=\"div\">\n                    Currently selected files: {files.length}\n                </Typography>\n                <List dense={true}>\n                    {getExtensionList().map((item, index) => (\n                        <Card sx={{ width: '100%', height: '10%' }} className=\"App-FileUploadCard\" key={index} >\n                            <CardContent className=\"\">\n                                <ListItem>\n                                    <ListItemText\n                                        primary={item}\n                                    />\n                                </ListItem>\n                            </CardContent>\n                        </Card>\n                    ))}\n                </List>\n            </Grid>\n\n            <Typography component={'span'}>\n                Detected model:\n                <Typography> Type: {model.type} </Typography>\n                <Typography> Uncertainty: {model.uncertainty} </Typography>\n                <Typography> Solver: {model.solver} </Typography>\n\n            </Typography>\n        </React.Fragment>\n    )\n};\n\nexport default ProblemCharacteristics;\n"]},"metadata":{},"sourceType":"module"}